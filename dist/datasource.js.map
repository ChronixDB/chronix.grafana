{"version":3,"sources":["../src/datasource.js"],"names":["escapeTag","name","indexOf","toTagQueryString","tag","tagName","map","join","toTargetQueryString","target","tags","Object","keys","length","targetQueryStrings","_","toTargetJoinString","attributes","requiredFields","ChronixDbDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","options","start","range","from","unix","end","to","targets","rawQuery","then","extractTimeSeries","method","successMessage","status","message","title","errorMessage","reject","datasourceRequest","response","success","catch","tsName","emptyResult","when","data","facet_counts","facet_fields","nameFields","console","log","filter","unused","index","text","targetsQueryStrings","query","joinquery","RAW_QUERY_BASE","RAW_QUERY_JOIN","RAW_QUERY_FILTER_FUNCTION","RAW_QUERY_BASE_WITH_FILTER","targetsResponse","undefined","dataset","docs","tsPoints","i","currentDataSet","currentTimeSeries","jsonData","JSON","parse","dataAsJson","timestamps","values","j","push","ret","key","datapoints","mapToTextValue","result","fields","stringFields","property","hasOwnProperty","toLowerCase","attribute","mapValueToText","field","pairs","pair","value"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\r\n\r\nfunction escapeTag(name) {\r\n    return name.indexOf('.') !== -1 ? `\"${name}\"` : name;\r\n}\r\n\r\nfunction toTagQueryString(tag, tagName) {\r\n    return tagName + ':(' + tag.map(escapeTag).join(' OR ') + ')'\r\n}\r\n\r\nfunction toTargetQueryString(target) {\r\n    if (!target.tags || Object.keys(target.tags).length === 0) {\r\n        // simple name-only\r\n        return target.name;\r\n    }\r\n\r\n    // create strings for each tag\r\n    const targetQueryStrings = _(target.tags).map(toTagQueryString);\r\n\r\n    return '(' + target.name + ' AND ' + targetQueryStrings.join(' AND ') + ')';\r\n}\r\n\r\nfunction toTargetJoinString(target) {\r\n    if (!target.attributes || Object.keys(target.attributes).length === 0) {\r\n        return \"name\";\r\n    }\r\n    // create strings for each tag\r\n    return _(target.attributes).join(',') + \",name,type\";\r\n}\r\n\r\nvar requiredFields = [\"data\", \"start\", \"end\", \"_version_\", \"id\", \"name\", \"type\"];\r\n\r\nexport class ChronixDbDatasource {\r\n\r\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n        this.type = instanceSettings.type;\r\n        this.url = instanceSettings.url;\r\n        this.name = instanceSettings.name;\r\n        this.$q = $q;\r\n        this.backendSrv = backendSrv;\r\n        this.templateSrv = templateSrv;\r\n    }\r\n\r\n    //region Required Grafana Datasource methods\r\n\r\n    query(options) {\r\n        // get the start and the end and multiply it with 1000 to get millis since 1970\r\n        var start = options.range.from.unix() * 1000;\r\n        var end = options.range.to.unix() * 1000;\r\n        var targets = options.targets;\r\n\r\n        return this.rawQuery(targets, start, end).then(this.extractTimeSeries);\r\n    }\r\n\r\n    /**\r\n     * Attempts to connect to the URL entered by the user and responds with a promise to either a \"success\" or an\r\n     * \"error\" message.\r\n     */\r\n    testDatasource() {\r\n        const options = {\r\n            url: `${this.url}/select?q=%7B!lucene%7D*%3A*&rows=0`,\r\n            method: 'GET'\r\n        };\r\n        const successMessage = {\r\n            status: \"success\",\r\n            message: \"Connection to Chronix established\",\r\n            title: \"Success\"\r\n        };\r\n        const errorMessage = this.$q.reject({\r\n            status: \"error\",\r\n            message: \"Connection to Chronix failed\",\r\n            title: \"Error\"\r\n        });\r\n\r\n        // perform the actual call...\r\n        return this.backendSrv.datasourceRequest(options)\r\n        // ... check if the response is technically successful ...\r\n            .then(response => response && response.status === 200)\r\n            // ... and respond appropriately\r\n            .then(success => success ? successMessage : errorMessage)\r\n            // ... and react appropriately, too, when the call somehow didn't work\r\n            .catch(error => errorMessage);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    findTimeSeriesByNames(tsName) {\r\n        const emptyResult = this.$q.when([]);\r\n\r\n        if (!tsName || tsName === '*') {\r\n            // no \"*\" accepted from the user\r\n            return emptyResult;\r\n        }\r\n\r\n        if (tsName.indexOf('*') === -1) {\r\n            // append an \"*\" at the end if the user didn't already provide one\r\n            tsName = tsName + '*';\r\n        }\r\n\r\n        const options = {\r\n            //do a facet query\r\n            url: `${this.url}/select?facet.field=name&facet=on&facet.mincount=1&q=name:${tsName}&rows=0&wt=json`,\r\n            method: 'GET'\r\n        };\r\n\r\n        return this.backendSrv.datasourceRequest(options)\r\n            .then(response => response && response.data && response.data.facet_counts && response.data.facet_counts.facet_fields && response.data.facet_counts.facet_fields.name)\r\n            .then((nameFields) => {\r\n                // somehow no valid response => empty array\r\n                if (!nameFields) {\r\n                    console.log(`could not find any matching time series for \"${tsName}\"`);\r\n                    return emptyResult;\r\n                }\r\n\r\n                // take only the names, not the counts\r\n                return nameFields\r\n                    .filter((unused, index) => index % 2 === 0)\r\n                    // and provide them as objects with the \"text\" property\r\n                    .map(text => ({text}));\r\n            })\r\n            // if the request itself failed\r\n            .catch(error => emptyResult);\r\n    }\r\n\r\n    //endregion\r\n\r\n    rawQuery(targets, start, end) {\r\n        // create strings for each target\r\n        var targetsQueryStrings = _(targets).map(toTargetQueryString);\r\n\r\n        var query = 'name:(' + targetsQueryStrings.join(' OR ') + ')'\r\n            + ' AND start:' + start\r\n            + ' AND end:' + end;\r\n\r\n        var joinquery = _(targets).map(toTargetJoinString);\r\n\r\n        //At this point we have to query chronix\r\n        var RAW_QUERY_BASE = '/select?fl=dataAsJson&wt=json';\r\n        var RAW_QUERY_JOIN = '&cj=' + joinquery;\r\n        var RAW_QUERY_FILTER_FUNCTION = '';//'&cf=metric{vector:0.1}';\r\n        var RAW_QUERY_BASE_WITH_FILTER = RAW_QUERY_BASE + RAW_QUERY_FILTER_FUNCTION + RAW_QUERY_JOIN + '&q=';\r\n\r\n        console.log(\"Chronix Query: \" + RAW_QUERY_BASE_WITH_FILTER + query);\r\n\r\n        var options = {\r\n            method: 'GET',\r\n            url: this.url + RAW_QUERY_BASE_WITH_FILTER + query\r\n        };\r\n\r\n        return this.backendSrv.datasourceRequest(options).then(function (response) {\r\n            return [targets, response];\r\n        });\r\n    }\r\n\r\n    extractTimeSeries(targetsResponse) {\r\n        var response = targetsResponse[1];\r\n\r\n        if (response.data === undefined) {\r\n            return {data: []};\r\n        }\r\n        var dataset = response.data.response.docs;\r\n\r\n        var tsPoints = {};\r\n\r\n        for (var i = 0; i < dataset.length; i++) {\r\n            var currentDataSet = dataset[i];\r\n            var currentTimeSeries = currentDataSet.name;\r\n\r\n            if (!(currentTimeSeries in tsPoints)) {\r\n                tsPoints[currentTimeSeries] = [];\r\n            }\r\n\r\n            var jsonData = JSON.parse(currentDataSet.dataAsJson);\r\n\r\n            var timestamps = jsonData[0];\r\n            var values = jsonData[1];\r\n\r\n            //add them\r\n            for (var j = 0; j < timestamps.length; j++) {\r\n                tsPoints[currentTimeSeries].push([values[j], timestamps[j]]);\r\n            }\r\n\r\n        }\r\n\r\n        var ret = [];\r\n        for (var key in tsPoints) {\r\n            ret.push({target: key, datapoints: tsPoints[key]});\r\n        }\r\n        return {data: ret};\r\n    }\r\n\r\n    /**\r\n     * Gets the available fields / attributes\r\n     */\r\n    suggestAttributes() {\r\n        var options = {\r\n            method: 'GET',\r\n            url: this.url + '/admin/luke?numTerms=0&wt=json'\r\n        };\r\n\r\n        return this.backendSrv.datasourceRequest(options).then(this.mapToTextValue);\r\n    }\r\n\r\n    mapToTextValue(result) {\r\n        var fields = result.data.fields;\r\n\r\n        var stringFields = [];\r\n        //Iterate over the returned fields\r\n        for (var property in fields) {\r\n            if (fields.hasOwnProperty(property)) {\r\n                if (requiredFields.indexOf(property.toLowerCase()) == -1) {\r\n                    stringFields.push(property)\r\n                }\r\n            }\r\n        }\r\n        return _.map(stringFields, (name) => {\r\n            return {text: name};\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the available values for the attributes.\r\n     *\r\n     * @param name The name to get the available attributes.\r\n     * @param attribute The attribute.\r\n     */\r\n    suggestAttributesValues(name, attribute) {\r\n        var options = {\r\n            method: 'GET',\r\n            url: this.url + '/select?facet.field=' + attribute + '&facet=on&q=name:' + name + '&rows=0&wt=json'\r\n        };\r\n\r\n        return this.backendSrv.datasourceRequest(options).then(this.mapValueToText);\r\n    }\r\n\r\n    mapValueToText(result) {\r\n        var fields = result.data.facet_counts.facet_fields;\r\n\r\n        var field;\r\n        //Iterate over the returned fields\r\n        for (var property in fields) {\r\n            if (fields.hasOwnProperty(property)) {\r\n                field = property;\r\n            }\r\n        }\r\n\r\n        var pairs = [];\r\n        var values = fields[field];\r\n\r\n        //Build pairs\r\n        for (var i = 0; i < values.length; i++) {\r\n            pairs.push([values[i], values[++i]]);\r\n        }\r\n\r\n        return _.map(pairs, (pair) => {\r\n            return {text: pair[0], value: pair[1]};\r\n        });\r\n    }\r\n\r\n}\r\n"]}