{"version":3,"sources":["../src/datasource.js"],"names":["toTagQueryString","tag","tagName","join","toTargetQueryString","target","tags","Object","keys","length","metric","targetQueryStrings","_","map","toTargetJoinString","attributes","requiredFields","ChronixDbDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options","start","range","from","unix","end","to","targets","rawQuery","then","extractTimeSeries","targetsQueryStrings","query","joinquery","RAW_QUERY_BASE","RAW_QUERY_JOIN","RAW_QUERY_FILTER_FUNCTION","RAW_QUERY_BASE_WITH_FILTER","console","log","method","datasourceRequest","response","targetsResponse","data","undefined","dataset","docs","tsPoints","i","currentDataSet","currentMetric","jsonData","JSON","parse","dataAsJson","timestamps","values","j","push","ret","key","datapoints","status","message","title","when","metrics","each","results","r","indexOf","mapToTextValue","result","fields","stringFields","property","hasOwnProperty","toLowerCase","text","attribute","mapValueToText","facet_counts","facet_fields","field","pairs","pair","value"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\r\n\r\nfunction toTagQueryString (tag, tagName) {\r\n    return tagName + ':(' + tag.join(' OR ') + ')'\r\n}\r\n\r\nfunction toTargetQueryString (target) {\r\n    if (!target.tags || Object.keys(target.tags).length === 0) {\r\n        // simple metric-only\r\n        return target.metric;\r\n    }\r\n\r\n    // create strings for each tag\r\n    var targetQueryStrings = _(target.tags).map(toTagQueryString);\r\n\r\n    return '(' + target.metric + ' AND ' + targetQueryStrings.join(' AND ') + ')';\r\n}\r\n\r\nfunction toTargetJoinString (target) {\r\n    if (!target.attributes || Object.keys(target.attributes).length === 0) {\r\n        return \"metric\";\r\n    }\r\n    // create strings for each tag\r\n    return _(target.attributes).join(',') + \",metric\";\r\n}\r\n\r\nvar requiredFields = [\"data\", \"start\", \"end\", \"_version_\", \"id\", \"metric\"];\r\n\r\nexport class ChronixDbDatasource {\r\n\r\n    constructor (instanceSettings, $q, backendSrv, templateSrv) {\r\n        this.type = instanceSettings.type;\r\n        this.url = instanceSettings.url;\r\n        this.name = instanceSettings.name;\r\n        this.q = $q;\r\n        this.backendSrv = backendSrv;\r\n        this.templateSrv = templateSrv;\r\n    }\r\n\r\n    // Called once per panel (graph)\r\n    query (options) {\r\n        // get the start and the end and multiply it with 1000 to get millis since 1970\r\n        var start = options.range.from.unix() * 1000;\r\n        var end = options.range.to.unix() * 1000;\r\n        var targets = options.targets;\r\n\r\n        return this.rawQuery(targets, start, end).then(this.extractTimeSeries);\r\n    }\r\n\r\n    rawQuery (targets, start, end) {\r\n        // create strings for each target\r\n        var targetsQueryStrings = _(targets).map(toTargetQueryString);\r\n\r\n        var query = 'metric:(' + targetsQueryStrings.join(' OR ') + ')'\r\n            + ' AND start:' + start\r\n            + ' AND end:' + end;\r\n\r\n        var joinquery = _(targets).map(toTargetJoinString);\r\n\r\n        //At this point we have to query chronix\r\n        var RAW_QUERY_BASE = '/select?fl=dataAsJson&wt=json';\r\n        var RAW_QUERY_JOIN = '&fq=join=' + joinquery;\r\n        var RAW_QUERY_FILTER_FUNCTION = '';//'&fq=function=vector:0.1';\r\n        var RAW_QUERY_BASE_WITH_FILTER = RAW_QUERY_BASE + RAW_QUERY_FILTER_FUNCTION + RAW_QUERY_JOIN + '&q=';\r\n\r\n        console.log(\"Query: \" + RAW_QUERY_BASE_WITH_FILTER + query);\r\n\r\n        var options = {\r\n            method: 'GET',\r\n            url: this.url + RAW_QUERY_BASE_WITH_FILTER + query\r\n        };\r\n\r\n        return this.backendSrv.datasourceRequest(options).then(function (response) {\r\n            return [targets, response];\r\n        });\r\n    }\r\n\r\n    extractTimeSeries (targetsResponse) {\r\n        var response = targetsResponse[1];\r\n\r\n        if (response.data === undefined) {\r\n            return {data: []};\r\n        }\r\n        var dataset = response.data.response.docs;\r\n\r\n        var tsPoints = {};\r\n\r\n        for (var i = 0; i < dataset.length; i++) {\r\n            var currentDataSet = dataset[i];\r\n            var currentMetric = currentDataSet.metric;\r\n\r\n            if (!(currentMetric in tsPoints)) {\r\n                tsPoints[currentMetric] = [];\r\n            }\r\n\r\n            var jsonData = JSON.parse(currentDataSet.dataAsJson);\r\n\r\n            var timestamps = jsonData[0];\r\n            var values = jsonData[1];\r\n\r\n            //add them\r\n            for (var j = 0; j < timestamps.length; j++) {\r\n                tsPoints[currentMetric].push([values[j], timestamps[j]]);\r\n            }\r\n\r\n        }\r\n\r\n        var ret = [];\r\n        for (var key in tsPoints) {\r\n            ret.push({target: key, datapoints: tsPoints[key]});\r\n        }\r\n        return {data: ret};\r\n    }\r\n\r\n    /**\r\n     * Test true if chronix is available.\r\n     */\r\n    testDatasource () {\r\n        return this.backendSrv.datasourceRequest({\r\n            url: this.url + '/select?q=%7B!lucene%7D*%3A*&rows=0',\r\n            method: 'GET'\r\n        }).then(response => {\r\n            if (response.status === 200) {\r\n                return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the list of metrics\r\n     */\r\n    _performMetricSuggestQuery (metric) {\r\n        var options = {\r\n            //do a facet query\r\n            url: this.url + '/select?facet.field=metric&facet=on&q=metric:*&rows=0&wt=json',\r\n            method: 'GET'\r\n        };\r\n\r\n        return this.backendSrv.datasourceRequest(options).then(function (response) {\r\n            if (!response.data) {\r\n                return this.q.when([]);\r\n            }\r\n            var metrics = [];\r\n            _.each(response.data.results, function (r) {\r\n                if (r.indexOf(metric) >= 0) {\r\n                    metrics.push(r);\r\n                }\r\n            });\r\n            return metrics;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the available fields / attributes\r\n     */\r\n    suggestAttributes () {\r\n        var options = {\r\n            method: 'GET',\r\n            url: this.url + '/admin/luke?numTerms=0&wt=json'\r\n        };\r\n\r\n        return this.backendSrv.datasourceRequest(options).then(this.mapToTextValue);\r\n    }\r\n\r\n    mapToTextValue (result) {\r\n        var fields = result.data.fields;\r\n\r\n        var stringFields = [];\r\n        //Iterate over the returned fields\r\n        for (var property in fields) {\r\n            if (fields.hasOwnProperty(property)) {\r\n                if (requiredFields.indexOf(property.toLowerCase()) == -1) {\r\n                    stringFields.push(property)\r\n                }\r\n            }\r\n        }\r\n        return _.map(stringFields, (name) => {\r\n            return {text: name};\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the available values for the attributes\r\n     * @param metric the metric to get the available attributes\r\n     * @param attribute the attribute\r\n     */\r\n    suggestAttributesValues (metric, attribute) {\r\n        console.log(\"Metric is \" + metric + \" Attribute is \" + attribute);\r\n\r\n        var options = {\r\n            method: 'GET',\r\n            url: this.url + '/select?facet.field=' + attribute + '&facet=on&q=metric:' + metric + '&rows=0&wt=json'\r\n        };\r\n\r\n        return this.backendSrv.datasourceRequest(options).then(this.mapValueToText);\r\n    }\r\n\r\n    mapValueToText (result) {\r\n        console.log(\"Evaluating available attribute values.\");\r\n\r\n        var fields = result.data.facet_counts.facet_fields;\r\n\r\n        var field;\r\n        //Iterate over the returned fields\r\n        for (var property in fields) {\r\n            if (fields.hasOwnProperty(property)) {\r\n                console.log(\"Field: \" + property);\r\n                field = property;\r\n            }\r\n        }\r\n\r\n        var pairs = [];\r\n        var values = fields[field];\r\n\r\n        //Build pairs\r\n        for (var i = 0; i < values.length; i++) {\r\n            pairs.push([values[i], values[++i]]);\r\n        }\r\n\r\n        return _.map(pairs, (pair) => {\r\n            return {text: pair[0], value: pair[1]};\r\n        });\r\n    }\r\n\r\n}\r\n"]}